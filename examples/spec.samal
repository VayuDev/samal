struct Liste<T> {
    Liste<T> prev;
    Liste<T> next;
    T data;
}

enum Shape {
    CIRCLE(f32),
    RECTANGLE(f32, f32)
}

fn do(a : i32) -> (i32, i32) {
    i = a * a;
    (a, i);
}

fn map<X, Y>(list : X[], callback : $Y(X)) -> Y[] {
    if (list.len() == 0) {
        [];
    } else {
        callback(list.first()) + map<X, Y>(list.tail(), callback);
    };
}

fn main() -> i32 {
    squareTuple = do(20);
    square = squareTuple.1;
    list =
        0..square
        |> map(fn(i : i32) -> i32 {
            i*i;
        })
        |> filter(fn(i : i32) -> bool {
            i < 100;
        });
    list[0];
}
