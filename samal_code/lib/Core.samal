native fn print<T>(p: T) -> ()
native fn dumpStackTrace() -> ()

fn identity<T>(p: T) -> T {
    p
}

fn len<T>(l : [T]) -> i32 {
    if l == [] {
        0
    } else {
        1 + len<T>(l:tail)
    }
}

fn concat<T>(l1 : [T], l2 : [T]) -> [T] {
    if l1 == [] {
        l2
    } else {
        l1:head + concat<T>(l1:tail, l2)
    }
}

fn map<T, S>(l : [T], callback : fn(T) -> S) -> [S] {
    if l == [] {
        [:S]
    } else {
        callback(l:head) + map<T, S>(l:tail, callback)
    }
}

fn zip<S, T>(l1 : [S], l2 : [T]) -> [(S, T)] {
    if l1 == [] || l2 == [] {
        [:(S, T)]
    } else {
        (l1:head, l2:head) + zip<S, T>(l1:tail, l2:tail)
    }
}

fn seqRec<T>(index : T, limit: T) -> [T] {
    if limit < 1 {
        [:T]
    } else {
        index + seqRec<T>(index + 1, limit - 1)
    }
}

fn seq<T>(limit: T) -> [T] {
    seqRec<T>(0, limit)
}

fn createFilledList<T>(value : T, length : i32) -> [T] {
    if length < 1 {
        [:T]
    } else {
        value + createFilledList<T>(value, length - 1)
    }
}

fn sumRec<T>(current : T, list : [T]) -> T {
    if list == [] {
        current
    } else {
        @tail_call_self(current + list:head, list:tail)
    }
}
fn sum<T>(list : [T]) -> T {
    sumRec<T>(0, list)
}

fn reduce<S, T>(list : [S], initial : T, lambda : fn(S, T) -> T) -> T {
    if list == [] {
        initial
    } else {
        val = lambda(list:head, initial)
        reduce<S, T>(list:tail, val, lambda)
    }
}

fn filter<T>(list : [T], condition : fn(T) -> bool) -> [T] {
    if list == [] {
        [:T]
    } else {
        head = list:head
        if condition(head) {
            head + filter<T>(list:tail, condition)
        } else {
            filter<T>(list:tail, condition)
        }
    }
}