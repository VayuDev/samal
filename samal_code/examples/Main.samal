
fn main2(p : i32) -> i32 {
    Lists.testListSpeed(p)
    |> Core.reduce<i32, i32>(0, fn(e : i32, state : i32) -> i32 {
        state + e
    })
}

fn main3(p : i32) -> Structs.LinkedList<i32> {
    Structs.testStruct(p):0
}

fn func() -> fn() -> [i32] {
    l = [1, 2, 3]
    fn() -> [i32] {
        l
    }
}

fn infiniteLoop(v : i32) -> i32 {
    Core.print<i32>(v)
    @tail_call_self(v + 1)
}

enum Maybe<T> {
    Some{T},
    None{i32, i32, i32}
}

enum Tree<T> {
    Node{Tree<T>, T, Tree<T>},
    Empty{}
}
// Hey!
fn main() -> i32 {
    // run fib(28) 5 times
    Lists.testFib()
}