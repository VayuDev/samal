native fn openServerSocket(port : i32) -> Core.Maybe<i32>
native fn acceptClientSocket(serverSocket : i32) -> i32
native fn readByte(socket : i32) -> byte
native fn readStringUntilEmptyHeader(socket : i32) -> [char]
native fn readChar(socket : i32) -> char
native fn closeSocket(socket : i32) -> ()
native fn writeString(socket : i32, str : [char]) -> ()

struct HTTPRequest {
    method : [char],
    version : [char],
    url : [char],
    headers : [([char], [char])]
}

fn readUntilEmptyHeader(socket : i32, prepend : [char], lastThreeChars : [char]) -> [char] {
    ch = readChar(socket)
    lastFourChars = Core.concat(lastThreeChars, [ch])
    if lastFourChars == "\r\n\r\n" || ch == '\0' {
        Core.concat(prepend, [ch])
    } else {
        lastThreeChars = if Core.len(lastFourChars) > 3 {
            lastFourChars:tail
        } else {
            lastFourChars
        }
        @tail_call_self(socket, Core.concat(prepend, [ch]), lastThreeChars)
    }
}

enum Maybe<T> {
    Some{T},
    None{}
}

fn readHTTPHeader(socket : i32) -> Maybe<HTTPRequest> {
    str = readStringUntilEmptyHeader(socket)
    lines = Core.splitByChar(str, '\n')
    lines = Core.map(lines, fn(line : [char]) -> [char] {
        Core.takeWhile(line, fn(ch : char) -> bool {
            ch != '\r'
        })
    })

    firstLineSplit = Core.splitByChar(lines:head, ' ')
    if Core.len(firstLineSplit) != 3 {
        Maybe<HTTPRequest>::None{}
    } else {
        headers =
            lines:tail
            |> Core.map(fn(line : [char]) -> Maybe<([char], [char])> {
                splitList =
                    Core.takeWhileEx(line, fn(ch : char) -> bool {
                        ch != ':'
                    })
                if splitList:1 == "" {
                    Maybe<([char], [char])>::None{}
                } else {
                    Maybe<([char], [char])>::Some{(splitList:0, splitList:1:tail:tail)}
                }
            })
            |> Core.filter(fn(line : Maybe<([char], [char])>) -> bool {
                match line {
                    Some{m} -> true,
                    None{} -> false
                }
            })
            |> Core.map(fn(e : Maybe<([char], [char])>) -> ([char], [char]) {
                match e {
                    Some{n} -> n,
                    None{} -> ("", "")
                }
            })
        Maybe<HTTPRequest>::Some{HTTPRequest{method : firstLineSplit:head, version : firstLineSplit:tail:tail:head, url : firstLineSplit:tail:head, headers : headers}}
    }
}

fn loop(serverSocket : i32) -> () {
    clientSocket = acceptClientSocket(serverSocket)
    maybeHeader = readHTTPHeader(clientSocket)
    match maybeHeader {
        Some{header} -> {
            Core.print(header)

            path = Core.concat("/www", header:url)
            extension = IO.getExtension(path)
            contentType =
                if extension == ".html" {
                    "text/html"
                } else {
                    "text/plain"
                }

            response = match IO.readFileAsString(path) {
                Some{fileContent} -> (fileContent, "200 OK", contentType),
                None{} -> {
                    (" not found" |> Core.prepend(path) |> Core.prepend("Error: File "), "404 Not found", "text/plain")
                }
            }
            fullResponse =
                response:0
                |> Core.prepend("\r\n\r\n")
                |> Core.prepend(Core.toString(Core.len(response:0)))
                |> Core.prepend("; charset=utf-8\r\nContent-Length: ")
                |> Core.prepend(response:2)
                |> Core.prepend("\r\nContent-Type: ")
                |> Core.prepend(response:1)
                |> Core.prepend("HTTP/1.1 ")

            writeString(clientSocket, fullResponse)
        },
        None{} -> ()
    }

    closeSocket(clientSocket)
    @tail_call_self(serverSocket)
}

fn main() -> () {
    match openServerSocket(8080) {
        Some{socket} -> {
            Core.print("Socket created")
            loop(socket)
        },
        None{} -> Core.print("Failed to create socket")
    }
}