using Core

fn loop(serverSocket : i32) -> () {
    clientSocket = Net.acceptClientSocket(serverSocket)
    maybeHeader = Net.recvHTTPHeader(clientSocket)
    match maybeHeader {
        Some{header} -> {
            print(header)

            path = Core.concat("/www", header:url)
            extension = IO.getExtension(path)
            contentType =
                if extension == ".html" {
                    "text/html"
                } else {
                    "text/plain"
                }

            response = match IO.readFileAsString(path) {
                Some{fileContent} -> (fileContent, "200 OK", contentType),
                None{} -> {
                    (" not found" |> Core.prepend(path) |> Core.prepend("Error: File "), "404 Not found", "text/plain")
                }
            }
            fullResponse =
                response:0
                |> Core.prepend("\r\n\r\n")
                |> Core.prepend(Core.toString(Core.len(response:0)))
                |> Core.prepend("; charset=utf-8\r\nContent-Length: ")
                |> Core.prepend(response:2)
                |> Core.prepend("\r\nContent-Type: ")
                |> Core.prepend(response:1)
                |> Core.prepend("HTTP/1.1 ")

            Net.sendString(clientSocket, fullResponse)
        },
        None{} -> {
            Core.print("Invalid http request")
            ()
        }
    }

    Net.closeSocket(clientSocket)
    @tail_call_self(serverSocket)
}

fn main() -> () {
    match Net.openServerSocket(8080) {
        Some{socket} -> {
            print("Socket created")
            loop(socket)
        },
        None{} -> print("Failed to create socket")
    }
}