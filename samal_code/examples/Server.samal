using Core

struct Handler {
    url : [char],
    callback : fn(Net.HTTPRequest) -> Net.HTTPResponse
}

struct ServerConfig {
    port : i32,
    handlers : [Handler]
}

fn search<T>(list : [T], callback : fn(T) -> bool) -> bool {
    if list == [] {
        false
    } else {
        if callback(list:head) {
            true
        } else {
            @tail_call_self(list:tail, callback)
        }
    }
}

fn loop(serverSocket : i32, config : ServerConfig) -> () {
    clientSocket = Net.acceptClientSocket(serverSocket)
    maybeHeader = Net.recvHTTPHeader(clientSocket)
    match maybeHeader {
        Some{header} -> {
            handlerFound = search(config:handlers, fn(handler : Handler) -> bool {
                if handler:url == header:url || handler:url == "*" {
                    response = handler:callback(header)
                    Net.sendResponse(clientSocket, response)
                    true
                } else {
                    false
                }
            })
            if handlerFound {
                ()
            } else {
                Net.sendResponse(clientSocket, Net.HTTPResponse{body: " not found" |> Core.prepend(header:url) |> Core.prepend("Error: Path "), status : 404, contentType: "text/plain"})
            }
            ()
        },
        None{} -> {
            print("Invalid http request")
            ()
        }
    }

    Net.closeSocket(clientSocket)
    @tail_call_self(serverSocket, config)
}

fn runServer(config : ServerConfig) -> () {
    match Net.openServerSocket(config:port) {
        Some{socket} -> {
            print("Socket created")
            loop(socket, config)
        },
        None{} -> print("Failed to create socket")
    }
}

fn main() -> () {
    handlers = [
        Handler{url : "/", callback : fn(request : Net.HTTPRequest) -> Net.HTTPResponse {
            response = match IO.readFileAsString("/www/index.html") {
                Some{fileContent} -> Net.HTTPResponse{body : fileContent, status : 200, contentType : "text/html"},
                None{} -> {
                    Net.HTTPResponse{body: "Error: Path index.html not found", status : 404, contentType: "text/plain"}
                }
            }
        }},
        Handler{url : "*", callback : fn(request : Net.HTTPRequest) -> Net.HTTPResponse {
            path = Core.concat("/www", request:url)
            extension = IO.getExtension(path)
            contentType =
                if extension == ".html" {
                    "text/html"
                } else {
                    "text/plain"
                }

            response = match IO.readFileAsString(path) {
                Some{fileContent} -> Net.HTTPResponse{body : fileContent, status : 200, contentType : contentType},
                None{} -> {
                    Net.HTTPResponse{body: " not found" |> Core.prepend(request:url) |> Core.prepend("Error: Path "), status : 404, contentType: "text/plain"}
                }
            }
            response
        }}
    ]
    runServer(ServerConfig{port : 8081, handlers : handlers})
}